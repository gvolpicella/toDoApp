var todoList=function(){var t={divTodoList:document.getElementById("todoer-list-section")},e=function(e){var o="",n=e.length;if(n>0){o='<ul id="todoer-list">';for(var d=0;d<n;d++)o+='<li id="todo-'+d+'" class="'+e[d].state+'"><button class="checkboxed"><i class="fa fa-check" aria-hidden="true"></i></button><input class="todo-text" type="text" value="'+e[d].title+'" required></input><div class="todo-date"><i class="fa fa-calendar-o" aria-hidden="true"></i><input class="todo-date-input" type="date" value="'+e[d].date+'" required></input></div></li>';o+="</ul>";o+='<div class="div-actions container"><button id="clear-todos">Clear todos</button></div>'}else o="<p>You donâ€™t have anything to do. <strong>Add something now</strong>.</p>";t.divTodoList.innerHTML=o;return!1},o=function(){var e=function(t){t.target.closest("li").classList.remove("editing");var e=t.target.closest("li"),o=e.id.substr(5,1),n=e.querySelector(".todo-text").value,d=e.querySelector(".todo-date-input").value,a=e.className.replace("editing","").trim();todoController.edit(o,n,d,a)};t.divTodoList.addEventListener("click",function(t){if("clear-todos"===t.target.id)todoController.clear();else if("checkboxed"===t.target.parentNode.className){var o=t.target.parentNode.parentNode;o.classList.toggle("completed");e(t)}});t.divTodoList.addEventListener("click",function(t){if("todo-text"===t.target.className||"todo-date-input"===t.target.className){t.target.closest("li").classList.add("editing");t.target.addEventListener("blur",e)}})};(function(){o()})();return{set:e}}(),todoController=function(){var t=[],e=function(){var t=localStorage.getItem("todo");if(null!==t)return JSON.parse(t)},o=function(e,o){t.push({title:e,date:o,state:""});t.sort(i);localStorage.setItem("todo",JSON.stringify(t));todoList.set(t);return!1},n=function(e){e>-1&&t.splice(e,1);localStorage.setItem("todo",JSON.stringify(t));todoList.set(t);return!1},d=function(e,o,n,d){if(e&&o&&n){t[e].title=o;t[e].date=n;t[e].state=d;t.sort(i);localStorage.setItem("todo",JSON.stringify(t));todoList.set(t)}return!1},a=function(){t=[];localStorage.removeItem("todo");todoList.set(t);return!1},i=function(t,e){date1=new Date(t.date);date2=new Date(e.date);return date1<date2?-1:date1>date2?1:0};(function(){t=e();t?todoList.set(t):t=[]})();return{get:e,set:o,remove:n,clear:a,edit:d}}(),todoView=function(){var t={newTodo:document.getElementById("todoer-add"),newTodoText:document.getElementById("todoer-add-text"),newTodoDateInput:document.getElementById("todoer-add-date-input"),newTodoDateLabel:document.getElementById("todoer-add-date-label"),btnTodoSubmit:document.getElementById("todoer-add-submit")},e=function(e){this.classList.add("active");t.newTodoText.focus();e.stopPropagation();document.addEventListener("click",d)},o=function(e){t.newTodoDateLabel.classList.add("hidden");t.newTodoDateInput.click();t.newTodoDateInput.focus();e.stopPropagation()},n=function(e){e.stopPropagation();var o=t.newTodoText.value,n=t.newTodoDateInput.value;if(o&&n){e.preventDefault();todoController.set(o,n);a()}},d=function(){t.newTodo.classList.remove("active");t.newTodoText.blur();document.removeEventListener("click",d);t.newTodoDateLabel.classList.remove("hidden")},a=function(){t.newTodoText.value="";t.newTodoDateInput.value="";d()},i=function(){t.newTodo.addEventListener("click",e);t.newTodoDateLabel.addEventListener("click",o);t.newTodoDateInput.addEventListener("click",o);t.btnTodoSubmit.addEventListener("click",n)};(function(){i()})();return{}}();!function(){console.log("todo app started")}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
